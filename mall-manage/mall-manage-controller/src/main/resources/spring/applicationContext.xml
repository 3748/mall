<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--使用spring自带的占位符替换功能-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--允许JVM参数覆盖-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>

        <!--忽略没有找到的资源文件-->
        <property name="ignoreResourceNotFound" value="true"/>

        <!--配置资源文件-->
        <property name="locations">
            <list>
                <!--
                    Spring容器与SpringMVC容器
                        1: spring容器是父容器,Service属于父容器
                        2: SpringMVC容器是子容器,Controller属于子容器
                        3: 子容器可以读取父容器的资源(bean)
                            eg:Service可以注入Controller
                        4: 父容器不能读取子容器的资源

                    @Value
                        在Spring容器初始化（所有的bean）之后，在当前的所在容器中获取值，然后注入。
                        当@Value写在Controller中时,只会在SpringMVC容器中查找配置数据

                        env.properties(该配置文件属于spring容器)属于父容器

                    解决方法
                        1: 用Service当做中介,Service属于父容器,可以读取到配置文件中的值, 然后将Service注入到Controller中,即可完成上传路径配置文件的读取
                        2: 将配置文件注入SpringMVC容器中

                        建议使用第一种
                -->
                <value>classpath:properties/jdbc.properties</value>
                <value>classpath:properties/env.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/rabbit.properties</value>
            </list>
        </property>
    </bean>

    <!--
        扫描包:
            1: 扫描配置的base-package包下的所有使用了@Component注解的类，并且将它们自动注册到容器中
            2: 同时也扫描@Controller，@Service，@Repository这三个注解，因为他们是继承自@Component。
    -->
    <context:component-scan base-package="com.mall"/>

    <!--
        1: 有了context:component-scan配置，context:annotation-config是可以省略掉的
        2: context:component-scan配置会默认打开context:annotation-config配置。
        3: 以下配置会默认声明了@Required、@Autowired、 @PostConstruct、@PersistenceContext、@Resource、@PreDestroy等注解。
    -->
    <!--<context:annotation-config/>-->

    <!--主数据源-->
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.master.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <property name="filters" value="${filters}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}"/>
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${logAbandoned}"/>
        <property name="connectionInitSqls" value="${connectionInitSqls}"/>
    </bean>

    <!--从数据源-->
    <bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.slave.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <property name="filters" value="${filters}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}"/>
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${logAbandoned}"/>
        <property name="connectionInitSqls" value="${connectionInitSqls}"/>
    </bean>

    <!--定义数据源,使用自己实现的数据源-->
    <bean id="dataSource" class="com.mall.common.datasource.DynamicDataSource">
        <!--设置多个数据源-->
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!--这个key需要和程序中的key一致-->
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave" value-ref="slaveDataSource"/>
            </map>
        </property>
        <!--设置默认的数据源，这里默认走写库-->
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>
</beans>