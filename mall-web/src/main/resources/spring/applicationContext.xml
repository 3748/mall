<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 使用spring自带的占位符替换功能 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

        <!--允许JVM参数覆盖-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>

        <!--忽略没有找到的资源文件-->
        <property name="ignoreResourceNotFound" value="true"/>

        <!--配置资源文件-->
        <property name="locations">
            <list>
                <!--
                    Spring容器与SpringMVC容器
                        1: spring容器是父容器,Service属于父容器
                        2: SpringMVC容器是子容器,Controller属于子容器
                        3: 子容器可以读取父容器的资源(bean)
                            eg:Service可以注入Controller
                        4: 父容器不能读取子容器的资源

                    @Value
                        在Spring容器初始化（所有的bean）之后，在当前的所在容器中获取值，然后注入。
                        当@Value写在Controller中时,只会在SpringMVC容器中查找配置数据

                        env.properties(该配置文件属于spring容器)属于父容器

                    解决方法
                        1: 用Service当做中介,Service属于父容器,可以读取到配置文件中的值, 然后将Service注入到Controller中,即可完成上传路径配置文件的读取
                        2: 将配置文件注入SpringMVC容器中

                        建议使用第一种
                -->
                <value>classpath:properties/env.properties</value>
                <value>classpath:properties/http.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/rabbit.properties</value>
            </list>
        </property>
    </bean>

    <!-- 扫描包 -->
    <context:component-scan base-package="com.mall"/>

</beans>
