<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <!-- 定义连接管理器
        HttpConnectManager.java
            PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
            // 设置最大连接数
            cm.setMaxTotal(200);
            // 设置每个主机地址的并发数
            cm.setDefaultMaxPerRoute(20);

        下面配置文件和上面代码实现功能一致
    -->
    <bean id="httpClientConnectionManager"
          class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager">
        <property name="maxTotal" value="${http.maxTotal}"></property>
        <property name="defaultMaxPerRoute" value="${http.maxPerRoute}"></property>
    </bean>

    <!--
        HttpClient构建器 :
            CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();
            相当于
            CloseableHttpClient httpClient = new HttpClientBuilder().setConnectionManager(cm).build();

        下面配置文件和上面代码实现功能一致(不包含后面的build)
    -->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">
        <property name="connectionManager" ref="httpClientConnectionManager"></property>
    </bean>

    <!--
        定义httpClient对象
        此处实现build功能

        此时新建的httpClient为单例,此处不能使用单例,上面两个可以使单例,加入scope="prototype"变成多例
    -->
    <bean id="closeableHttpClient" class="org.apache.http.impl.client.CloseableHttpClient"
          factory-bean="httpClientBuilder" factory-method="build" scope="prototype">
    </bean>

    <!--
        请求参数构造器
        RequestConfigDemo.java
            RequestConfig config = RequestConfig.custom().setConnectTimeout(1000) // 创建连接的最长时间
                .setConnectionRequestTimeout(500) // 从连接池中获取到连接的最长时间
                .setSocketTimeout(10 * 1000) // 数据传输的最长时间
                .setStaleConnectionCheckEnabled(true) // 提交请求前测试连接是否可用
                .build();

            进入customer
                public static RequestConfig.Builder custom() {
                    return new Builder();
                }

            下面配置文件相当于 new Builder(),加上设置,不包含build();
     -->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <property name="connectTimeout" value="${http.connectTimeout}"></property>
        <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}"></property>
        <property name="socketTimeout" value="${http.socketTimeout}"></property>
        <property name="staleConnectionCheckEnabled" value="${http.staleConnectionCheckEnabled}"></property>
    </bean>

    <!--
        定义请求参数对象
        此处实现build功能

        此时新建的config为单例,此处能使用单例
    -->
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig"
          factory-bean="requestConfigBuilder" factory-method="build">
    </bean>

    <!--
        定期关闭无效连接
            IdleConnectionEvictor.java

                public IdleConnectionEvictor(HttpClientConnectionManager connMgr) {
                    this.connMgr = connMgr;
                    this.start();//启动当前线程
                }

                构造器为连接管理器
    -->
    <bean class="com.mall.common.http.client.IdleConnectionEvictor">
        <constructor-arg index="0" ref="httpClientConnectionManager"/>
    </bean>
</beans>
